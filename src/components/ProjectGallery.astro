---
import { t as tFunc } from "i18next";
import i18next from "../i18n/config";
import { projectImages, projectDetails } from "../data/projects";

const { lang = "hr" } = Astro.params;

// Change language before rendering
if (lang) {
    await i18next.changeLanguage(lang);
}

const projects = [
    {
        id: 1,
        title: tFunc("projects.gallery.project0.title"),
        description: tFunc("projects.gallery.project0.description"),
        gallery: projectImages.countryHouse,
        details: projectDetails.countryHouse,
    },
    {
        id: 2,
        title: tFunc("projects.gallery.project1.title"),
        description: tFunc("projects.gallery.project1.description"),
        gallery: projectImages.carCanopy,
        details: projectDetails.carCanopy,
    },
    {
        id: 3,
        title: tFunc("projects.gallery.project2.title"),
        description: tFunc("projects.gallery.project2.description"),
        gallery: projectImages.countryHouseBuje,
        details: projectDetails.countryHouseBuje,
    },
    {
        id: 4,
        title: tFunc("projects.gallery.project3.title"),
        description: tFunc("projects.gallery.project3.description"),
        gallery: projectImages.vilaInBale,
        details: projectDetails.vilaInBale,
    },
    {
        id: 5,
        title: tFunc("projects.gallery.project4.title"),
        description: tFunc("projects.gallery.project4.description"),
        gallery: projectImages.houseMaliLosinj,
        details: projectDetails.houseMaliLosinj,
    },
    {
        id: 6,
        title: tFunc("projects.gallery.project5.title"),
        description: tFunc("projects.gallery.project5.description"),
        gallery: projectImages.familyHouseZadar,
        details: projectDetails.familyHouseZadar,
    },
];
---

<section class="py-20 bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center mb-16">
            <h2 class="text-4xl font-bold text-primary mb-4">
                {tFunc("projects.title")}
            </h2>
            <p class="text-xl text-gray-600 max-w-3xl mx-auto">
                {tFunc("projects.subtitle")}
            </p>
        </div>

        <div
            class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 animate-fade-in">
            {
                projects.map((project, index) => (
                    <div
                        class="group relative cursor-pointer overflow-hidden rounded-lg shadow-lg hover:shadow-xl transition-all duration-300 opacity-0 project-card"
                        data-project={JSON.stringify(project)}
                        style={`animation-delay: ${index * 100}ms`}>
                        <div class="aspect-[4/3] overflow-hidden">
                            <img
                                src={project.gallery[0]}
                                alt={project.title}
                                class="h-full w-full object-cover transition-transform duration-700 ease-in-out group-hover:scale-110"
                                loading="lazy"
                            />
                        </div>
                        <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                            <div class="absolute bottom-0 p-4 text-white transform translate-y-2 group-hover:translate-y-0 transition-transform duration-300">
                                <h3 class="text-lg font-semibold">
                                    {project.title}
                                </h3>
                                <p class="text-sm opacity-0 group-hover:opacity-100 transition-opacity duration-500 delay-100">
                                    {project.description}
                                </p>
                            </div>
                        </div>
                    </div>
                ))
            }
        </div>
    </div>
</section>

<!-- Modal -->
<div
    id="projectModal"
    class="fixed inset-0 z-[110] hidden opacity-0 transition-opacity duration-300">
    <div class="absolute inset-0 bg-black/90 backdrop-blur-sm"></div>
    <div class="fixed inset-0 flex items-center justify-center p-4 pt-24">
        <div
            class="relative bg-white rounded-lg max-w-4xl w-full max-h-[85vh] overflow-y-auto mt-5 transform scale-95 opacity-0 transition-all duration-300"
            id="modalContent">
            <button
                id="closeModal"
                class="absolute top-2 right-2 text-gray-700 hover:text-gray-900 z-[120] p-3 bg-white rounded-full shadow-lg hover:bg-gray-100 transition-all flex items-center gap-2 border border-gray-200"
                aria-label="Close project details">
                <span class="font-medium hidden sm:inline"
                    >{tFunc("projects.closeModal")}</span
                >
                <svg
                    class="w-6 h-6 sm:w-5 sm:h-5"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24">
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>

            <div class="p-6 pt-10">
                <!-- Swiper Gallery -->
                <div
                    class="swiper-container mb-6 aspect-video rounded-lg overflow-hidden shadow-lg">
                    <div class="swiper-wrapper">
                        <!-- Slides will be inserted here by JavaScript -->
                    </div>
                    <!-- Navigation buttons -->
                    <div class="swiper-button-next"></div>
                    <div class="swiper-button-prev"></div>
                    <!-- Pagination -->
                    <div class="swiper-pagination"></div>
                </div>

                <h2
                    id="modalTitle"
                    class="text-3xl font-bold text-primary mb-2">
                </h2>
                <p id="modalDescription" class="text-gray-600 text-lg mb-6"></p>

                <div class="grid grid-cols-2 sm:grid-cols-4 gap-4">
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <div
                            id="modalPower"
                            class="text-2xl font-bold text-secondary">
                        </div>
                        <div class="text-gray-600">
                            {tFunc("projects.details.power")}
                        </div>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <div
                            id="modalPanels"
                            class="text-2xl font-bold text-secondary">
                        </div>
                        <div class="text-gray-600">
                            {tFunc("projects.details.panels")}
                        </div>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <div
                            id="modalOutput"
                            class="text-2xl font-bold text-secondary">
                        </div>
                        <div class="text-gray-600">
                            {tFunc("projects.details.yearlyOutput")}
                        </div>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <div
                            id="modalYear"
                            class="text-2xl font-bold text-secondary">
                        </div>
                        <div class="text-gray-600">
                            {tFunc("projects.details.completed")}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css"
/>
<script
    is:inline
    src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>

<script>
    // Add type declaration for Swiper
    declare const Swiper: any;

    // Define swiper type
    let swiper: any;
    const modal = document.getElementById("projectModal");
    const modalContent = document.getElementById("modalContent");
    const closeButton = document.getElementById("closeModal");
    const projectElements = document.querySelectorAll("[data-project]");

    // Modal elements
    const modalImage = document.getElementById("modalImage");
    const modalTitle = document.getElementById("modalTitle");
    const modalDescription = document.getElementById("modalDescription");
    const modalPower = document.getElementById("modalPower");
    const modalPanels = document.getElementById("modalPanels");
    const modalOutput = document.getElementById("modalOutput");
    const modalYear = document.getElementById("modalYear");
    const swiperWrapper = document.querySelector(".swiper-wrapper");

    // Animate project cards on load
    document.addEventListener("DOMContentLoaded", () => {
        const projectCards = document.querySelectorAll(".project-card");
        projectCards.forEach((card) => {
            setTimeout(() => {
                card.classList.add("animate-in");
            }, 100);
        });
    });

    projectElements.forEach((element) => {
        element.addEventListener("click", () => {
            const project = JSON.parse(
                element.getAttribute("data-project") || "{}"
            );

            // Preload images for smooth swiper transitions
            const preloadImages = async () => {
                const imagePromises = project.gallery?.map(
                    (imageUrl: string) => {
                        return new Promise((resolve, reject) => {
                            const img = new Image();
                            img.onload = () => resolve(imageUrl);
                            img.onerror = reject;
                            img.src = imageUrl;
                        });
                    }
                );

                return Promise.all(imagePromises);
            };

            // Clear previous slides
            if (swiperWrapper) {
                swiperWrapper.innerHTML = "";

                // Add loading indicator
                const loadingSlide = document.createElement("div");
                loadingSlide.className = "swiper-slide loading-slide";
                loadingSlide.innerHTML = `
                    <div class="flex items-center justify-center w-full h-full">
                        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
                    </div>
                `;
                swiperWrapper.appendChild(loadingSlide);
            }

            // Show modal with loading state
            modal?.classList.remove("hidden");
            // Delay to allow CSS transition to work
            setTimeout(() => {
                modal?.classList.add("opacity-100");
                modalContent?.classList.add("scale-100", "opacity-100");
            }, 10);
            document.body.style.overflow = "hidden";

            // Preload images then initialize swiper
            preloadImages().then(() => {
                // Clear loading indicator
                if (swiperWrapper) {
                    swiperWrapper.innerHTML = "";

                    // Add actual slides
                    project.gallery?.forEach((imageUrl: string) => {
                        const slide = document.createElement("div");
                        slide.className = "swiper-slide";
                        slide.innerHTML = `
                            <img 
                                src="${imageUrl}" 
                                alt="${project.title}"
                                class="w-full h-full object-cover"
                            />
                        `;
                        swiperWrapper.appendChild(slide);
                    });
                }

                // Initialize or update Swiper
                if (swiper) {
                    swiper.destroy();
                }

                swiper = new Swiper(".swiper-container", {
                    slidesPerView: 1,
                    spaceBetween: 0,
                    loop: true,
                    effect: "fade", // Use fade effect for smoother transitions
                    fadeEffect: {
                        crossFade: true,
                    },
                    speed: 800, // Slower transition for smoother effect
                    navigation: {
                        nextEl: ".swiper-button-next",
                        prevEl: ".swiper-button-prev",
                    },
                    pagination: {
                        el: ".swiper-pagination",
                        clickable: true,
                        dynamicBullets: true,
                    },
                    autoplay: {
                        delay: 5000,
                        disableOnInteraction: false,
                    },
                    grabCursor: true,
                    keyboard: {
                        enabled: true,
                    },
                    lazy: {
                        loadPrevNext: true,
                    },
                });
            });

            // Update modal content
            if (modalTitle) modalTitle.textContent = project.title;
            if (modalDescription)
                modalDescription.textContent = project.description;
            if (modalPower) modalPower.textContent = project.details.power;
            if (modalPanels) modalPanels.textContent = project.details.panels;
            if (modalOutput)
                modalOutput.textContent = project.details.yearlyOutput;
            if (modalYear) modalYear.textContent = project.details.completed;
        });
    });

    closeButton?.addEventListener("click", closeModal);
    modal?.addEventListener("click", (e) => {
        if (e.target === modal) {
            closeModal();
        }
    });

    document.addEventListener("keydown", (e) => {
        if (e.key === "Escape") {
            closeModal();
        }
    });

    function closeModal() {
        modal?.classList.remove("opacity-100");
        modalContent?.classList.remove("scale-100", "opacity-100");

        // Wait for animations to complete before hiding
        setTimeout(() => {
            modal?.classList.add("hidden");
            document.body.style.overflow = "";
            if (swiper) {
                swiper.destroy();
            }
        }, 300);
    }
</script>

<style>
    .swiper-button-next,
    .swiper-button-prev {
        color: #fbb034 !important;
        opacity: 0.7;
        transition: opacity 0.3s ease;
    }

    .swiper-button-next:hover,
    .swiper-button-prev:hover {
        opacity: 1;
    }

    .swiper-pagination-bullet {
        transition: all 0.3s ease;
    }

    .swiper-pagination-bullet-active {
        background: #fbb034 !important;
        transform: scale(1.2);
    }

    .swiper-container {
        width: 100%;
        height: 100%;
    }

    .swiper-slide {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 100%;
        transition: opacity 0.5s ease;
    }

    /* Animation for project cards */
    .project-card {
        animation: fadeInUp 0.6s ease forwards;
    }

    .animate-in {
        opacity: 1 !important;
    }

    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<!-- Import the ImageModal component for zoomable images -->
<script>
    // Ensure ImageModal is properly initialized for all data-zoomable images
    document.addEventListener("astro:page-load", () => {
        // This ensures that all images with data-zoomable attribute
        // will work with the ImageModal component
        const zoomableImages = document.querySelectorAll("[data-zoomable]");
        if (zoomableImages.length > 0) {
            console.log(
                `${zoomableImages.length} zoomable images found and initialized`
            );
        }
    });
</script>

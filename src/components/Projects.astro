---
import { t as tFunc } from "i18next";
import i18next from "../i18n/config";
import { projectImages, projectDetails } from "../data/projects";

// Import the WebP images
import lukaA from "../assets/images/Luka-A.webp";
import lukaA1 from "../assets/images/Luka-A1.webp";
import lukaA2 from "../assets/images/Luka-A2.webp";
import lukaA3 from "../assets/images/Luka-A3.webp";
import lukaB from "../assets/images/Luka-B.webp";
import lukaB1 from "../assets/images/Luka-B1.webp";
import lukaB2 from "../assets/images/Luka-B2.webp";
import lukaD from "../assets/images/Luka-D.webp";
import lukaD1 from "../assets/images/Luka-D1.webp";
import lukaD2 from "../assets/images/Luka-D2.webp";
import lukaF from "../assets/images/Luka-F.webp";
import lukaF1 from "../assets/images/Luka-F1.webp";
import lukaF2 from "../assets/images/Luka-F2.webp";
import lukaE from "../assets/images/Luka-E.webp";
import lukaE1 from "../assets/images/Luka-E1.webp";
import lukaE2 from "../assets/images/Luka-E2.webp";
import lukaE3 from "../assets/images/Luka-E3.webp";
import lukaG from "../assets/images/Luka-G.webp";
import lukaG1 from "../assets/images/Luka-G1.webp";
import lukaG2 from "../assets/images/Luka-G2.webp";
import lukaH from "../assets/images/Luka-H.webp";
import lukaH1 from "../assets/images/Luka-H1.webp";
import lukaH2 from "../assets/images/Luka-H2.webp";
import lukaI from "../assets/images/Luka-I.webp";
import lukaI1 from "../assets/images/Luka-I1.webp";
import lukaJ from "../assets/images/Luka-J.webp";
import lukaJ1 from "../assets/images/Luka-J1.webp";
import lukaK from "../assets/images/Luka-K.webp";
import lukaK1 from "../assets/images/Luka-K1.webp";
import lukaL from "../assets/images/Luka-L.webp";
import lukaL1 from "../assets/images/Luka-L1.webp";
import lukaL2 from "../assets/images/Luka-L2.webp";

const { lang = "hr" } = Astro.params;

// Change language before rendering
if (lang) {
    await i18next.changeLanguage(lang);
}

const projects = [
    {
        title: tFunc("projects.mainGallery.project1.title"),
        description: tFunc("projects.mainGallery.project1.description"),
        images: [lukaF.src, lukaF1.src, lukaF2.src],
        details: {
            power: "18kW",
            panels: "72",
            savings: "90%",
            completed: "2023",
        },
    },
    {
        title: tFunc("projects.mainGallery.project2.title"),
        description: tFunc("projects.mainGallery.project2.description"),
        images: [lukaA2.src, lukaA.src, lukaA1.src, lukaA3.src],
        details: {
            power: "9kW",
            panels: "36",
            savings: "85%",
            completed: "2022",
        },
    },
    {
        title: tFunc("projects.mainGallery.project3.title"),
        description: tFunc("projects.mainGallery.project3.description"),
        images: [lukaB.src, lukaB1.src, lukaB2.src],
        details: {
            power: "9kW",
            panels: "36",
            savings: "75%",
            completed: "2023",
        },
    },
    {
        title: tFunc("projects.mainGallery.project4.title"),
        description: tFunc("projects.mainGallery.project4.description"),
        images: [lukaD.src, lukaD1.src, lukaD2.src],
        details: {
            power: "9kW",
            panels: "36",
            savings: "80%",
            completed: "2023",
        },
    },
];

// Function to create a slug from a title
const createSlug = (title: string) => {
    return title
        .toLowerCase()
        .replace(/[^\w\s-]/g, "") // Remove special characters
        .replace(/\s+/g, "-") // Replace spaces with hyphens
        .trim();
};

interface Translations {
    title: string;
    description: string;
    power: string;
    panels: string;
    savings: string;
    year: string;
}

interface TranslationsMap {
    hr: Translations;
    en: Translations;
    sl: Translations;
    de: Translations;
    it: Translations;
    hu: Translations;
    [key: string]: Translations;
}

const translations: TranslationsMap = {
    hr: {
        title: "Naši Projekti",
        description:
            "Pogledajte neke od naših uspješno realiziranih projekata solarnih sustava",
        power: "Snaga sustava",
        panels: "Broj panela",
        savings: "Ušteda",
        year: "Godina",
    },
    en: {
        title: "Our Projects",
        description:
            "Take a look at some of our successfully completed solar system projects",
        power: "System Power",
        panels: "Number of Panels",
        savings: "Savings",
        year: "Year",
    },
    sl: {
        title: "Naši Projekti",
        description:
            "Oglejte si nekaj naših uspešno izvedenih projektov solarnih sistemov",
        power: "Moč sistema",
        panels: "Število panelov",
        savings: "Prihranek",
        year: "Leto",
    },
    de: {
        title: "Unsere Projekte",
        description:
            "Sehen Sie sich einige unserer erfolgreich realisierten Solarsystemprojekte an",
        power: "Systemleistung",
        panels: "Anzahl der Module",
        savings: "Einsparung",
        year: "Jahr",
    },
    it: {
        title: "I Nostri Progetti",
        description:
            "Dai uno sguardo ad alcuni dei nostri progetti di sistemi solari completati con successo",
        power: "Potenza Sistema",
        panels: "Numero Pannelli",
        savings: "Risparmio",
        year: "Anno",
    },
    hu: {
        title: "Projektjeink",
        description:
            "Tekintse meg néhány sikeresen megvalósított napelemes rendszer projektünket",
        power: "Rendszer Teljesítmény",
        panels: "Panelek Száma",
        savings: "Megtakarítás",
        year: "Év",
    },
};

const t = translations[lang as keyof typeof translations] || translations.hr;
---

<section class="pt-40 pb-20 bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center mb-16">
            <h1 class="text-4xl font-bold text-primary mb-4">{t.title}</h1>
            <p class="text-xl text-gray-600 max-w-3xl mx-auto">
                {t.description}
            </p>
        </div>

        <!-- Navigation Menu -->
        <div class="mb-16">
            <nav
                class="flex flex-wrap justify-center gap-4"
                aria-label="Project navigation">
                {
                    projects.map((project) => (
                        <a
                            href={`#${createSlug(project.title)}`}
                            class="project-nav-link px-6 py-3 bg-white rounded-lg shadow-sm text-primary hover:bg-primary hover:text-white transition-all duration-300 transform hover:scale-105">
                            {project.title}
                        </a>
                    ))
                }
            </nav>
        </div>

        <div class="grid gap-24">
            {
                projects.map((project, index) => (
                    <div
                        id={createSlug(project.title)}
                        class={`grid md:grid-cols-2 gap-8 items-center scroll-mt-32 ${index % 2 === 1 ? "md:grid-flow-dense" : ""}`}>
                        <div
                            class={`space-y-6 ${index % 2 === 1 ? "md:col-start-2" : ""}`}>
                            <h2 class="text-3xl font-bold text-primary">
                                {project.title}
                            </h2>
                            <p class="text-gray-600 text-lg">
                                {project.description}
                            </p>

                            <div class="mt-4 grid grid-cols-2 gap-2">
                                <div class="flex flex-col">
                                    <span class="text-xs text-gray-500">
                                        {tFunc("projects.details.power")}
                                    </span>
                                    <span class="font-medium">
                                        {project.details.power}
                                    </span>
                                </div>
                                <div class="flex flex-col">
                                    <span class="text-xs text-gray-500">
                                        {tFunc("projects.details.panels")}
                                    </span>
                                    <span class="font-medium">
                                        {project.details.panels}
                                    </span>
                                </div>
                                <div class="flex flex-col">
                                    <span class="text-xs text-gray-500">
                                        {tFunc("projects.details.savings")}
                                    </span>
                                    <span class="font-medium">
                                        {project.details.savings}
                                    </span>
                                </div>
                                <div class="flex flex-col">
                                    <span class="text-xs text-gray-500">
                                        {tFunc("projects.details.completed")}
                                    </span>
                                    <span class="font-medium">
                                        {project.details.completed}
                                    </span>
                                </div>
                            </div>
                        </div>

                        <div class={index % 2 === 1 ? "md:col-start-1" : ""}>
                            <div class="project-carousel relative rounded-lg shadow-xl overflow-hidden">
                                <div
                                    class="carousel-container h-[400px]"
                                    data-project-id={index}>
                                    {project.images.map((image, imgIndex) => (
                                        <div
                                            class={`carousel-slide absolute top-0 left-0 w-full h-full transition-opacity duration-500 ${imgIndex === 0 ? "opacity-100" : "opacity-0"}`}
                                            data-slide-index={imgIndex}>
                                            <picture>
                                                <source
                                                    media="(max-width: 768px)"
                                                    srcset={`${image}?width=640&quality=80`}
                                                />
                                                <source
                                                    media="(min-width: 769px)"
                                                    srcset={image}
                                                />
                                                <img
                                                    src={image}
                                                    alt={`${project.title} - Image ${imgIndex + 1}`}
                                                    class="w-full h-full object-cover"
                                                    loading="lazy"
                                                    decoding="async"
                                                    width="1074"
                                                    height="400"
                                                />
                                            </picture>
                                        </div>
                                    ))}
                                </div>

                                <div class="carousel-controls absolute bottom-4 left-0 right-0 flex justify-center space-x-4">
                                    {project.images.map((_, imgIndex) => (
                                        <button
                                            class={`carousel-dot w-6 h-6 p-4 rounded-full bg-white opacity-50 transition-opacity ${imgIndex === 0 ? "opacity-100" : ""}`}
                                            data-project-id={index}
                                            data-slide-index={imgIndex}
                                            aria-label={`Show image ${imgIndex + 1}`}
                                        />
                                    ))}
                                </div>

                                <button
                                    class="carousel-prev absolute left-3 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-30 text-white w-12 h-12 rounded-full flex items-center justify-center focus:outline-none hover:bg-opacity-50"
                                    data-project-id={index}
                                    aria-label="Previous image">
                                    <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        fill="none"
                                        viewBox="0 0 24 24"
                                        stroke="currentColor"
                                        class="w-8 h-8">
                                        <path
                                            stroke-linecap="round"
                                            stroke-linejoin="round"
                                            stroke-width="2"
                                            d="M15 19l-7-7 7-7"
                                        />
                                    </svg>
                                </button>

                                <button
                                    class="carousel-next absolute right-3 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-30 text-white w-12 h-12 rounded-full flex items-center justify-center focus:outline-none hover:bg-opacity-50"
                                    data-project-id={index}
                                    aria-label="Next image">
                                    <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        fill="none"
                                        viewBox="0 0 24 24"
                                        stroke="currentColor"
                                        class="w-8 h-8">
                                        <path
                                            stroke-linecap="round"
                                            stroke-linejoin="round"
                                            stroke-width="2"
                                            d="M9 5l7 7-7 7"
                                        />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                ))
            }
        </div>
    </div>
</section>

<script>
    function initializeProjectNavigation() {
        // Smooth scrolling for project navigation links
        document.querySelectorAll(".project-nav-link").forEach((anchor) => {
            anchor.addEventListener(
                "click",
                function (this: HTMLElement, e: Event) {
                    e.preventDefault();
                    const href = this.getAttribute("href");
                    if (href) {
                        const target = document.querySelector(href);
                        if (target) {
                            const navHeight =
                                document.querySelector("nav")?.offsetHeight ||
                                0;
                            const targetPosition =
                                target.getBoundingClientRect().top +
                                window.pageYOffset;
                            const offsetPosition = targetPosition - navHeight;

                            window.scrollTo({
                                top: offsetPosition,
                                behavior: "smooth",
                            });

                            // Update URL without scrolling
                            history.pushState(null, "", href);
                        }
                    }
                }
            );
        });

        // Highlight active section on scroll
        const observerOptions = {
            root: null,
            rootMargin: "-50% 0px",
            threshold: 0,
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
                const id = entry.target.id;
                const menuItem = document.querySelector(
                    `.project-nav-link[href="#${id}"]`
                );

                if (entry.isIntersecting) {
                    menuItem?.classList.add(
                        "bg-primary",
                        "text-white",
                        "scale-105"
                    );
                    menuItem?.classList.remove("bg-white", "text-primary");
                } else {
                    menuItem?.classList.remove(
                        "bg-primary",
                        "text-white",
                        "scale-105"
                    );
                    menuItem?.classList.add("bg-white", "text-primary");
                }
            });
        }, observerOptions);

        document.querySelectorAll("[id]").forEach((section) => {
            observer.observe(section);
        });
    }

    function initializeProjectCarousels() {
        const carousels = document.querySelectorAll(".project-carousel");

        carousels.forEach((carousel) => {
            const projectId = carousel
                .querySelector(".carousel-container")
                ?.getAttribute("data-project-id");
            if (!projectId) return;

            const slides = carousel.querySelectorAll(".carousel-slide");
            const dots = carousel.querySelectorAll(".carousel-dot");
            const prevBtn = carousel.querySelector(".carousel-prev");
            const nextBtn = carousel.querySelector(".carousel-next");

            let currentSlide = 0;
            const slideCount = slides.length;

            // Function to show a specific slide
            const showSlide = (index: number) => {
                // Hide all slides
                slides.forEach((slide) => {
                    (slide as HTMLElement).classList.remove("opacity-100");
                    (slide as HTMLElement).classList.add("opacity-0");
                });

                // Show the selected slide
                (slides[index] as HTMLElement).classList.remove("opacity-0");
                (slides[index] as HTMLElement).classList.add("opacity-100");

                // Update dots
                dots.forEach((dot) => {
                    dot.classList.remove("opacity-100");
                    dot.classList.add("opacity-50");
                });

                (dots[index] as HTMLElement).classList.remove("opacity-50");
                (dots[index] as HTMLElement).classList.add("opacity-100");

                // Update current slide index
                currentSlide = index;
            };

            // Event listener for previous button
            prevBtn?.addEventListener("click", () => {
                let newIndex = currentSlide - 1;
                if (newIndex < 0) newIndex = slideCount - 1;
                showSlide(newIndex);
            });

            // Event listener for next button
            nextBtn?.addEventListener("click", () => {
                let newIndex = currentSlide + 1;
                if (newIndex >= slideCount) newIndex = 0;
                showSlide(newIndex);
            });

            // Event listeners for dots
            dots.forEach((dot, index) => {
                dot.addEventListener("click", () => {
                    showSlide(index);
                });
            });

            // Initialize first slide
            showSlide(0);
        });
    }

    // Run initialization when the DOM is loaded
    document.addEventListener("DOMContentLoaded", () => {
        initializeProjectNavigation();
        initializeProjectCarousels();
    });

    // Re-initialize on Astro page transitions
    document.addEventListener("astro:page-load", () => {
        initializeProjectNavigation();
        initializeProjectCarousels();
    });
</script>

<style>
    .project-carousel {
        overflow: hidden;
        max-width: 100%;
    }

    .carousel-container {
        position: relative;
        width: 100%;
        overflow: hidden;
    }

    .carousel-slide {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .carousel-button {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        border: none;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        z-index: 10;
        transition: background-color 0.3s;
    }

    .carousel-button:hover {
        background-color: rgba(0, 0, 0, 0.8);
    }

    .prev-button {
        left: 15px;
    }

    .next-button {
        right: 15px;
    }

    .carousel-indicators {
        position: absolute;
        bottom: 15px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        gap: 8px;
        z-index: 10;
    }

    .carousel-dot {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        background-color: rgba(255, 255, 255, 0.5);
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .carousel-dot.active {
        background-color: white;
        transform: scale(1.2);
    }

    /* Mobile responsiveness fixes */
    @media (max-width: 768px) {
        .project-details {
            padding: 1rem;
        }

        img,
        picture,
        svg,
        video {
            max-width: 100%;
            height: auto;
        }

        .carousel-container,
        .project-carousel {
            width: 100%;
            max-width: 100vw;
            overflow-x: hidden;
        }
    }
</style>

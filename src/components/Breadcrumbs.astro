---
import { t } from "i18next";
import i18next from "../i18n/config";

const { lang = "hr" } = Astro.params;

// Change language before rendering
if (lang) {
    await i18next.changeLanguage(lang);
}

// Define paths that should be translated
const pathTranslations = {
    projects: {
        en: "projects",
        hr: "projekti",
        sl: "projekti",
        de: "projekte",
        it: "progetti",
        hu: "projektek"
    },
    "about-us": {
        en: "about-us",
        hr: "o-nama",
        sl: "o-nas",
        de: "uber-uns",
        it: "chi-siamo",
        hu: "rolunk"
    },
    contact: {
        en: "contact",
        hr: "kontakt",
        sl: "kontakt",
        de: "kontakt",
        it: "contatto",
        hu: "kapcsolat"
    }
};

// Path display names (friendly names)
const pathDisplayNames = {
    home: {
        en: "Home",
        hr: "Početna",
        sl: "Domov",
        de: "Startseite",
        it: "Home",
        hu: "Kezdőlap"
    },
    projects: {
        en: "Projects", 
        hr: "Projekti",
        sl: "Projekti",
        de: "Projekte",
        it: "Progetti",
        hu: "Projektek"
    },
    "about-us": {
        en: "About Us",
        hr: "O nama",
        sl: "O nas",
        de: "Über uns",
        it: "Chi siamo",
        hu: "Rólunk"
    },
    contact: {
        en: "Contact",
        hr: "Kontakt",
        sl: "Kontakt",
        de: "Kontakt",
        it: "Contatto",
        hu: "Kapcsolat"
    }
};

// Current path segments from URL
const currentUrl = Astro.url.pathname;
const segments = currentUrl.split('/').filter(segment => segment);

// Ignore language prefix
const pathSegments = segments.length > 0 && 
    Object.keys(i18next.languages || {}).includes(segments[0]) 
    ? segments.slice(1) 
    : segments;

// Build breadcrumbs
const breadcrumbs = [
    {
        name: pathDisplayNames.home[lang] || "Home",
        url: `/${lang}/`
    }
];

// Function to get display name for path segment
function getDisplayName(segment) {
    // First try to find a matching key in pathTranslations (normalized segment)
    const normalizedSegment = segment.replace(/-/g, '').toLowerCase();
    
    // Check if this segment has translations
    for (const [key, translations] of Object.entries(pathDisplayNames)) {
        // Check if current segment matches the translation for any language
        for (const [langCode, translation] of Object.entries(pathTranslations[key] || {})) {
            if (segment === translation) {
                // Found a match! Return the display name for current language
                return pathDisplayNames[key][lang] || segment;
            }
        }
    }
    
    // If no translation found, format the segment (capitalize, replace hyphens with spaces)
    let displayName = segment.replace(/-/g, ' ');
    return displayName.charAt(0).toUpperCase() + displayName.slice(1);
}

// Add each path segment as a breadcrumb
let currentPath = `/${lang}`;
pathSegments.forEach((segment) => {
    // Add to breadcrumbs
    currentPath += `/${segment}`;
    breadcrumbs.push({
        name: getDisplayName(segment),
        url: currentPath
    });
});

// Get structured data for breadcrumbs
const breadcrumbsStructuredData = {
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    "itemListElement": breadcrumbs.map((breadcrumb, index) => ({
        "@type": "ListItem",
        "position": index + 1,
        "name": breadcrumb.name,
        "item": `https://solarfusion.hr${breadcrumb.url}`
    }))
};
---

<nav aria-label="Breadcrumbs" class="py-3 px-4 bg-gray-50">
    <ol class="flex items-center flex-wrap text-sm text-gray-600">
        {breadcrumbs.map((breadcrumb, index) => (
            <li class="flex items-center">
                {index > 0 && (
                    <span class="mx-2 text-gray-400">/</span>
                )}
                
                {index === breadcrumbs.length - 1 ? (
                    <span class="font-medium text-primary" aria-current="page">
                        {breadcrumb.name}
                    </span>
                ) : (
                    <a href={breadcrumb.url} class="hover:text-secondary transition-colors">
                        {breadcrumb.name}
                    </a>
                )}
            </li>
        ))}
    </ol>
</nav>

<!-- Structured Data for Breadcrumbs -->
<script type="application/ld+json">{JSON.stringify(breadcrumbsStructuredData)}</script> 
---

---

<div
    id="imageModal"
    class="modal fixed inset-0 z-50"
    style="display: none;"
    role="dialog"
    aria-modal="true">
    <div class="modal-backdrop fixed inset-0 bg-black/90 backdrop-blur-sm">
    </div>

    <button
        data-close-modal
        class="absolute top-4 right-4 text-white z-10 p-2 hover:text-gray-300 transition-colors"
        aria-label="Close modal">
        <svg
            class="w-8 h-8"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24">
            <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M6 18L18 6M6 6l12 12"></path>
        </svg>
    </button>

    <div class="fixed inset-0 flex items-center justify-center p-4">
        <img
            id="modalImage"
            src=""
            alt="Enlarged view"
            class="modal-content max-w-[90vw] max-h-[90vh] object-contain rounded-lg"
        />
    </div>
</div>

<script>
    // Initialize image modal functionality
    document.addEventListener("astro:page-load", () => {
        const modal = document.getElementById("imageModal");
        const modalImage = document.getElementById(
            "modalImage"
        ) as HTMLImageElement;
        const zoomableImages = document.querySelectorAll("[data-zoomable]");

        if (!modal || !modalImage) return;

        zoomableImages.forEach((img) => {
            img.addEventListener("click", () => {
                // Type assertion to make TypeScript happy
                const imgElement = img as HTMLImageElement;
                modalImage.src = imgElement.src;

                modal.style.display = "block";
                // Force reflow
                modal.offsetHeight;
                modal.classList.add("modal-visible");
                document.body.classList.add("modal-open");
            });
        });

        // Add close functionality
        const closeButtons = document.querySelectorAll("[data-close-modal]");
        closeButtons.forEach((button) => {
            button.addEventListener("click", () => {
                modal.classList.remove("modal-visible");
                setTimeout(() => {
                    modal.style.display = "none";
                    document.body.classList.remove("modal-open");
                }, 300); // Match the transition duration
            });
        });

        // Close on backdrop click
        modal.addEventListener("click", (e) => {
            if (e.target === modal) {
                modal.classList.remove("modal-visible");
                setTimeout(() => {
                    modal.style.display = "none";
                    document.body.classList.remove("modal-open");
                }, 300);
            }
        });

        // Close on ESC key
        document.addEventListener("keydown", (e) => {
            if (
                e.key === "Escape" &&
                modal.classList.contains("modal-visible")
            ) {
                modal.classList.remove("modal-visible");
                setTimeout(() => {
                    modal.style.display = "none";
                    document.body.classList.remove("modal-open");
                }, 300);
            }
        });
    });
</script>

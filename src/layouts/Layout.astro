---
import { ViewTransitions } from "astro:transitions";
import Navigation from "../components/Navigation.astro";
import Footer from "../components/Footer.astro";
import BackToTop from "../components/BackToTop.astro";
import ImageModal from "../components/ImageModal.astro";

interface Props {
    title?: string;
    description?: string;
}

const {
    title = "Solar Fusion",
    description = "Solar Fusion - Vodeći dobavljač solarnih energetskih rješenja. Instalacija solarnih panela, baterija i pretvarača za vaš dom ili poslovanje.",
} = Astro.props;

const { lang = "hr" } = Astro.params;

// Construct the full title with the site name
const fullTitle = title.includes("Solar Fusion")
    ? title
    : `Solar Fusion | ${title}`;

// Define critical resources
const criticalImageUrl =
    "https://assets.cdn.filesafe.space/M4krpnwvjmupM7QGr4NX/media/67cac48454acb4c0c3d44dca.webp";
const mobileImageUrl =
    "https://assets.cdn.filesafe.space/M4krpnwvjmupM7QGr4NX/media/67cac48454acb4c0c3d44dca.webp?width=640&quality=80";
---

<!doctype html>
<html lang={lang}>
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="generator" content={Astro.generator} />
        <meta name="description" content={description} />
        <meta property="og:image" content={criticalImageUrl} />
        <meta property="og:title" content={fullTitle} />
        <meta property="og:description" content={description} />
        <title>{fullTitle}</title>

        <!-- Resource hints for faster resource loading -->
        <link rel="dns-prefetch" href="https://assets.cdn.filesafe.space" />
        <link
            rel="preconnect"
            href="https://assets.cdn.filesafe.space"
            crossorigin
        />
        <link
            rel="preconnect"
            href="https://fonts.googleapis.com"
            crossorigin
        />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

        <!-- Mobile-specific preload for critical LCP image -->
        <link
            rel="preload"
            as="image"
            href={mobileImageUrl}
            media="(max-width: 768px)"
            fetchpriority="high"
        />
        <link
            rel="preload"
            as="image"
            href={criticalImageUrl}
            media="(min-width: 769px)"
            fetchpriority="high"
        />

        <!-- Critical rendering path optimization -->
        <script is:inline>
            // Mobile detection
            const isMobile =
                /iPhone|iPad|iPod|Android/i.test(navigator.userAgent) ||
                window.innerWidth <= 768;

            // Immediately set a base dark background color to avoid flash
            document.documentElement.style.backgroundColor = "#1a202c";

            // Critical font preloading for the hero subtitle
            const fontLink = document.createElement("link");
            fontLink.rel = "preload";
            fontLink.href =
                "https://fonts.googleapis.com/css2?family=Inter:wght@700&display=swap";
            fontLink.as = "style";
            document.head.appendChild(fontLink);

            // LCP optimization - initiate early fetch for critical image
            if (isMobile) {
                const preloadLink = document.createElement("link");
                preloadLink.rel = "preload";
                preloadLink.as = "image";
                preloadLink.href = `${mobileImageUrl}`;
                preloadLink.fetchPriority = "high";
                document.head.appendChild(preloadLink);
            }

            // Prevent layout shifts by setting initial dimensions
            document.documentElement.style.setProperty(
                "--hero-height",
                "100vh"
            );

            // Set content-visibility auto for below-the-fold content on mobile
            if (isMobile) {
                document.addEventListener("DOMContentLoaded", () => {
                    const belowFoldElements = document.querySelectorAll(
                        "section:not(.hero-section)"
                    );
                    belowFoldElements.forEach((el, index) => {
                        if (index > 0) {
                            // Skip the first section after hero
                            el.style.contentVisibility = "auto";
                            el.style.containIntrinsicSize = "0 500px"; // Estimated size
                        }
                    });
                });
            }
        </script>

        <!-- Inline critical CSS for mobile -->
        <style is:inline>
            /* Mobile-specific optimizations */
            @media (max-width: 768px) {
                /* Optimize font rendering for mobile */
                body {
                    text-rendering: optimizeSpeed;
                    -webkit-font-smoothing: antialiased;
                }

                /* Reduce animation complexity on mobile */
                * {
                    transition-duration: 0.1s !important;
                    animation-duration: 0.1s !important;
                }

                /* Improve touch response */
                a,
                button {
                    touch-action: manipulation;
                }
            }
        </style>

        <!-- Add View Transitions - simplified -->
        <ViewTransitions />

        <!-- Simplified preconnect setup -->
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link
            rel="preconnect"
            href="https://assets.cdn.filesafe.space"
            crossorigin
        />

        <!-- Preload only critical resources -->
        <link
            rel="preload"
            href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
            as="style"
            onload="this.onload=null;this.rel='stylesheet'"
        />

        <!-- Fallback for no-JS -->
        <noscript>
            <link
                href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
                rel="stylesheet"
                type="text/css"
            />
        </noscript>

        <!-- Simplified critical CSS -->
        <style is:inline>
            /* Core styles only */
            @font-face {
                font-family: "Inter";
                font-style: normal;
                font-weight: 400;
                font-display: swap;
                src: local("Inter Regular"), local("Inter-Regular");
            }

            :root {
                --primary-color: #0f172a;
                --secondary-color: #f59e0b;
                --text-color: #1f2937;
                --text-light: #e5e7eb;
                --hero-font-size: 3.75rem;
            }

            html,
            body {
                margin: 0;
                padding: 0;
                width: 100%;
                overflow-x: hidden;
                font-family:
                    "Inter",
                    system-ui,
                    -apple-system,
                    sans-serif;
                font-size: 16px;
                line-height: 1.5;
                color: var(--text-color);
                background-color: #f9fafb;
            }

            /* Mobile optimizations */
            .is-mobile {
                font-size: 14px;
            }

            /* Optimize images */
            img {
                max-width: 100%;
                height: auto;
            }

            /* Optimize hero content */
            .hero-title,
            .hero-subtitle {
                font-size: var(--hero-font-size);
            }

            /* Reduce layout shifts */
            [data-astro-cid] {
                contain: layout;
            }

            /* Basic modal styles */
            .modal {
                display: none;
                position: fixed;
                z-index: 100;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
            }
        </style>
    </head>
    <body>
        <Navigation />
        <slot />
        <Footer />
        <BackToTop />
        <ImageModal />

        <!-- Deferred script loading -->
        <script>
            // Add any non-critical scripts here
            document.addEventListener("DOMContentLoaded", function () {
                // Initialize components after page is fully loaded
                // @ts-ignore - Allow access to the global function
                if (typeof window.initializeModals === "function") {
                    // @ts-ignore
                    window.initializeModals();
                }
            });
        </script>

        <!-- Simplified modal handling script -->
        <script is:inline>
            // Define the global modal function
            window.initializeModals = function () {
                // Mobile-optimized modal initialization
                const isMobile =
                    document.documentElement.classList.contains("is-mobile");

                // Simple modal handling with fewer animations for mobile
                document.querySelectorAll(".modal").forEach((modal) => {
                    const modalId = modal.id;

                    // Handle modal opening
                    document
                        .querySelectorAll(`[data-open-modal="${modalId}"]`)
                        .forEach((trigger) => {
                            trigger.addEventListener("click", (e) => {
                                e.preventDefault();

                                // Simple display without animations for mobile
                                modal.style.display = "block";
                                document.body.style.overflow = "hidden";

                                // Add visible class (for desktop animations)
                                if (!isMobile) {
                                    setTimeout(
                                        () =>
                                            modal.classList.add(
                                                "modal-visible"
                                            ),
                                        10
                                    );
                                } else {
                                    modal.classList.add("modal-visible");
                                }
                            });
                        });

                    // Handle modal closing
                    const closeModal = () => {
                        if (!isMobile) {
                            modal.classList.remove("modal-visible");
                            setTimeout(() => {
                                modal.style.display = "none";
                                document.body.style.overflow = "";
                            }, 200);
                        } else {
                            modal.classList.remove("modal-visible");
                            modal.style.display = "none";
                            document.body.style.overflow = "";
                        }
                    };

                    // Close on button click
                    modal
                        .querySelectorAll("[data-close-modal]")
                        .forEach((btn) => {
                            btn.addEventListener("click", closeModal);
                        });

                    // Close on backdrop click if it exists
                    const backdrop = modal.querySelector(".modal-backdrop");
                    if (backdrop) {
                        backdrop.addEventListener("click", (e) => {
                            if (e.target === backdrop) closeModal();
                        });
                    }

                    // Close on ESC key
                    document.addEventListener("keydown", (e) => {
                        if (
                            e.key === "Escape" &&
                            modal.style.display === "block"
                        ) {
                            closeModal();
                        }
                    });
                });
            };

            // Initialize on page load for non-Astro use cases
            document.addEventListener(
                "DOMContentLoaded",
                window.initializeModals
            );

            // Initialize after Astro page transitions
            document.addEventListener(
                "astro:page-load",
                window.initializeModals
            );
        </script>
    </body>
</html>
